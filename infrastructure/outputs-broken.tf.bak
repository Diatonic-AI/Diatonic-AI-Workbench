# AI Nexus Workbench - Terraform Outputs
# Output values for use by other systems and for reference

# General Information
output "deployment_info" {
  description = "General deployment information"
  value = {
    project           = var.project
    environment       = var.environment
    region           = local.region
    account_id       = local.account_id
    deployed_at      = timestamp()
    terraform_version = "~> 1.5"
  }
}

output "resource_prefix" {
  description = "Resource naming prefix used for all resources"
  value       = local.name_prefix
}

output "common_tags" {
  description = "Common tags applied to all resources"
  value       = local.common_tags
  sensitive   = false
}

# Note: Cognito outputs are defined in cognito.tf file

# DynamoDB Outputs
output "dynamodb_tables" {
  description = "DynamoDB table information"
  value = {
    user_profiles = {
      name = aws_dynamodb_table.user_profiles.name
      arn  = aws_dynamodb_table.user_profiles.arn
    }
    organization_data = {
      name = aws_dynamodb_table.organization_data.name
      arn  = aws_dynamodb_table.organization_data.arn
    }
    system_logs = {
      name = aws_dynamodb_table.system_logs.name
      arn  = aws_dynamodb_table.system_logs.arn
    }
    user_sessions = {
      name = aws_dynamodb_table.user_sessions.name
      arn  = aws_dynamodb_table.user_sessions.arn
    }
    application_settings = {
      name = aws_dynamodb_table.application_settings.name
      arn  = aws_dynamodb_table.application_settings.arn
    }
    user_content_metadata = {
      name = aws_dynamodb_table.user_content_metadata.name
      arn  = aws_dynamodb_table.user_content_metadata.arn
    }
  }
}

# Lambda Outputs
output "lambda_functions" {
  description = "Lambda function information"
  value = {
    user_profile_management = {
      function_name = aws_lambda_function.user_profile_management.function_name
      arn          = aws_lambda_function.user_profile_management.arn
    }
    auth_post_authentication = {
      function_name = aws_lambda_function.auth_post_authentication.function_name
      arn          = aws_lambda_function.auth_post_authentication.arn
    }
    user_registration = {
      function_name = aws_lambda_function.user_registration.function_name
      arn          = aws_lambda_function.user_registration.arn
    }
  }
}

output "lambda_layer_arn" {
  description = "Lambda layer ARN for shared dependencies"
  value       = aws_lambda_layer_version.shared_layer.arn
}

# API Gateway Outputs
output "api_gateway_info" {
  description = "API Gateway information"
  value = {
    rest_api_id       = aws_api_gateway_rest_api.ai_nexus_api.id
    stage_name        = aws_api_gateway_deployment.ai_nexus_deployment.stage_name
    invoke_url        = aws_api_gateway_deployment.ai_nexus_deployment.invoke_url
    execution_arn     = aws_api_gateway_rest_api.ai_nexus_api.execution_arn
    authorizer_id     = aws_api_gateway_authorizer.cognito_authorizer.id
  }
}

output "api_endpoints" {
  description = "API endpoint URLs"
  value = {
    base_url = aws_api_gateway_deployment.ai_nexus_deployment.invoke_url
    endpoints = {
      users        = "${aws_api_gateway_deployment.ai_nexus_deployment.invoke_url}/users"
      profile      = "${aws_api_gateway_deployment.ai_nexus_deployment.invoke_url}/profile"
      organizations = "${aws_api_gateway_deployment.ai_nexus_deployment.invoke_url}/organizations"
      settings     = "${aws_api_gateway_deployment.ai_nexus_deployment.invoke_url}/settings"
      content      = "${aws_api_gateway_deployment.ai_nexus_deployment.invoke_url}/content"
    }
  }
}

# Custom Domain (if configured)
output "custom_domain_info" {
  description = "Custom domain information"
  value = var.custom_domain_name != "" ? {
    domain_name         = var.custom_domain_name
    cloudfront_domain   = try(aws_api_gateway_domain_name.custom_domain[0].cloudfront_domain_name, null)
    certificate_arn     = var.certificate_arn
    base_path_mapping  = try(aws_api_gateway_base_path_mapping.custom_domain[0].base_path, null)
  } : null
}

# S3 Outputs
output "s3_bucket_info" {
  description = "S3 bucket information"
  value = {
    bucket_name        = aws_s3_bucket.user_content.bucket
    bucket_arn         = aws_s3_bucket.user_content.arn
    bucket_domain_name = aws_s3_bucket.user_content.bucket_domain_name
    region            = aws_s3_bucket.user_content.region
  }
}

# IAM Role Outputs
output "iam_roles" {
  description = "IAM role information"
  value = {
    authenticated_role = {
      arn  = aws_iam_role.authenticated_role.arn
      name = aws_iam_role.authenticated_role.name
    }
    unauthenticated_role = {
      arn  = aws_iam_role.unauthenticated_role.arn
      name = aws_iam_role.unauthenticated_role.name
    }
    lambda_execution_role = {
      arn  = aws_iam_role.lambda_execution_role.arn
      name = aws_iam_role.lambda_execution_role.name
    }
  }
}

# Security Outputs
output "security_info" {
  description = "Security configuration information"
  value = {
    kms_key_arn = var.environment == "prod" ? aws_kms_key.ai_nexus_key[0].arn : null
    kms_alias   = var.environment == "prod" ? aws_kms_alias.ai_nexus_key_alias[0].name : null
    waf_enabled = local.current_env_config.enable_waf
    cors_origins = var.allowed_cors_origins
  }
}

# Monitoring Outputs
output "monitoring_info" {
  description = "Monitoring and logging configuration"
  value = {
    cloudwatch_log_group = {
      name              = aws_cloudwatch_log_group.lambda_logs.name
      arn               = aws_cloudwatch_log_group.lambda_logs.arn
      retention_in_days = aws_cloudwatch_log_group.lambda_logs.retention_in_days
    }
    api_gateway_log_group = var.enable_api_logging ? {
      name = aws_cloudwatch_log_group.api_gateway_logs[0].name
      arn  = aws_cloudwatch_log_group.api_gateway_logs[0].arn
    } : null
  }
}

# Configuration Parameters
output "ssm_parameters" {
  description = "SSM parameter information"
  value = {
    app_config = {
      name = aws_ssm_parameter.app_config.name
      arn  = aws_ssm_parameter.app_config.arn
    }
  }
}

# Frontend Configuration
output "frontend_config" {
  description = "Configuration values needed for frontend applications"
  value = {
    aws_region           = var.aws_region
    cognito_user_pool_id = aws_cognito_user_pool.ai_nexus_pool.id
    cognito_app_client_id = aws_cognito_user_pool_client.ai_nexus_client.id
    cognito_identity_pool_id = aws_cognito_identity_pool.ai_nexus_identity_pool.id
    cognito_domain       = aws_cognito_user_pool_domain.ai_nexus_domain.domain
    api_base_url        = aws_api_gateway_deployment.ai_nexus_deployment.invoke_url
    s3_bucket           = aws_s3_bucket.user_content.bucket
    user_groups         = keys(var.cognito_user_groups)
  }
  sensitive = true
}

# Environment-specific Configuration
output "environment_config" {
  description = "Environment-specific configuration"
  value = {
    environment         = var.environment
    advanced_security   = local.current_env_config.enable_advanced_security
    waf_enabled        = local.current_env_config.enable_waf
    backup_enabled     = local.current_env_config.enable_backup
    log_retention_days = local.current_env_config.log_retention_days
    monitoring_enabled = var.enable_monitoring
  }
}

# Cost Information
output "cost_estimation" {
  description = "Estimated monthly costs for major resources"
  value = {
    note = "Estimates based on minimal usage - actual costs may vary"
    components = {
      cognito        = "Free tier: 50,000 MAU, then $0.0055/MAU"
      dynamodb       = "Pay per request: $0.25 per million reads, $1.25 per million writes"
      lambda         = "Free tier: 1M requests/month, 400,000 GB-seconds/month"
      api_gateway    = "$3.50 per million API calls"
      s3             = "$0.023/GB standard storage"
      cloudwatch     = "$0.50/GB logs ingested"
    }
  }
}

# Resource Status
output "resource_summary" {
  description = "Summary of created resources"
  value = {
    total_resources = {
      cognito_resources  = 6
      dynamodb_tables   = 6
      lambda_functions  = 3
      iam_roles        = 7
      api_gateway_resources = 1
      s3_buckets       = 1
      cloudwatch_logs  = 2
    }
    features_enabled = {
      advanced_security = local.current_env_config.enable_advanced_security
      waf_protection   = local.current_env_config.enable_waf
      backup_enabled   = local.current_env_config.enable_backup
      monitoring       = var.enable_monitoring
      custom_domain    = var.custom_domain_name != ""
    }
  }
}

# Connection Test Information
output "test_endpoints" {
  description = "Endpoints for testing the deployed system"
  value = {
    health_check = "${aws_api_gateway_deployment.ai_nexus_deployment.invoke_url}/health"
    user_registration = "${aws_api_gateway_deployment.ai_nexus_deployment.invoke_url}/users"
    user_profile = "${aws_api_gateway_deployment.ai_nexus_deployment.invoke_url}/profile"
    test_commands = {
      curl_health = "curl ${aws_api_gateway_deployment.ai_nexus_deployment.invoke_url}/health"
      test_script = "./deploy-and-test.sh test-only"
    }
  }
}

# Documentation Links
output "documentation" {
  description = "Links to relevant documentation and guides"
  value = {
    frontend_integration = "./Frontend-Integration-Guide.md"
    testing_guide       = "Run ./deploy-and-test.sh for comprehensive testing"
    aws_console_links = {
      cognito     = "https://${var.aws_region}.console.aws.amazon.com/cognito/users/?region=${var.aws_region}#/pool/${aws_cognito_user_pool.ai_nexus_pool.id}/details"
      api_gateway = "https://${var.aws_region}.console.aws.amazon.com/apigateway/home?region=${var.aws_region}#/apis/${aws_api_gateway_rest_api.ai_nexus_api.id}/stages/${aws_api_gateway_deployment.ai_nexus_deployment.stage_name}"
      dynamodb    = "https://${var.aws_region}.console.aws.amazon.com/dynamodbv2/home?region=${var.aws_region}#tables"
    }
  }
}
