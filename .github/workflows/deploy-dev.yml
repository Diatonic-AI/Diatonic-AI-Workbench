name: Deploy to Dev Environment

on:
  push:
    branches:
      - main
      - dev
    paths:
      - 'apps/ai-nexus-workbench/**'
      - '.github/workflows/deploy-dev.yml'
  pull_request:
    branches:
      - main
    paths:
      - 'apps/ai-nexus-workbench/**'

defaults:
  run:
    working-directory: apps/ai-nexus-workbench

env:
  REGION: us-east-2
  BUCKET: aws-devops-dev-static-assets-development-gwenbxgb
  APP_DOMAIN: dev.diatonic.ai
  API_DOMAIN: api.dev.diatonic.ai
  AUTH_DOMAIN: auth.dev.diatonic.ai
  CF_DISTRIBUTION_ID: EB3GDEPQ1RC9T

jobs:
  deploy:
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: 'apps/ai-nexus-workbench/package-lock.json'

      - name: Install dependencies
        run: npm ci

      - name: Build application
        run: npm run build

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_DEPLOY_ROLE_ARN }}
          aws-region: ${{ env.REGION }}

      - name: Deploy assets to S3
        run: |
          aws s3 sync dist/ s3://${{ env.BUCKET }}/ \
            --exclude "index.html" \
            --cache-control "public, max-age=31536000, immutable" \
            --delete

      - name: Deploy index.html with proper headers
        run: |
          aws s3 cp dist/index.html s3://${{ env.BUCKET }}/index.html \
            --content-type "text/html; charset=utf-8" \
            --cache-control "no-cache, no-store, must-revalidate" \
            --metadata-directive REPLACE

      - name: Deploy special files
        run: |
          if [ -f dist/manifest.webmanifest ]; then
            aws s3 cp dist/manifest.webmanifest s3://${{ env.BUCKET }}/manifest.webmanifest \
              --content-type "application/manifest+json" \
              --cache-control "no-cache" \
              --metadata-directive REPLACE
          fi
          
          if [ -f dist/sw.js ]; then
            aws s3 cp dist/sw.js s3://${{ env.BUCKET }}/sw.js \
              --content-type "application/javascript; charset=utf-8" \
              --cache-control "no-cache" \
              --metadata-directive REPLACE
          fi
          
          if [ -f dist/robots.txt ]; then
            aws s3 cp dist/robots.txt s3://${{ env.BUCKET }}/robots.txt \
              --content-type "text/plain; charset=utf-8" \
              --cache-control "public, max-age=300" \
              --metadata-directive REPLACE
          fi

      - name: Invalidate CloudFront cache
        run: |
          aws cloudfront create-invalidation \
            --distribution-id ${{ env.CF_DISTRIBUTION_ID }} \
            --paths "/" "/index.html" "/manifest.webmanifest"

      - name: Verify deployment
        run: |
          echo "Waiting for CloudFront invalidation to propagate..."
          sleep 30
          
          echo "Testing main site..."
          curl -sI https://${{ env.APP_DOMAIN }} | head -5
          
          echo -e "\nTesting asset delivery..."
          ASSET=$(basename "$(ls dist/assets/*.js | head -1)")
          curl -sI "https://${{ env.APP_DOMAIN }}/assets/$ASSET" | head -3
          
          echo -e "\nTesting SPA routing..."
          curl -sI "https://${{ env.APP_DOMAIN }}/nonexistent" | head -2

      - name: Report deployment status
        run: |
          echo "üéâ Deployment completed successfully!"
          echo "üåê Application URL: https://${{ env.APP_DOMAIN }}"
          echo "üìä CloudFront Distribution: ${{ env.CF_DISTRIBUTION_ID }}"
          echo "ü™£ S3 Bucket: ${{ env.BUCKET }}"
